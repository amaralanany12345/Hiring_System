// <auto-generated />
using System;
using Hiring;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hiring.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240919092941_second")]
    partial class second
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hiring.Models.Company", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("companyNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("compnanyName")
                        .IsRequired()
                        .HasMaxLength(130)
                        .HasColumnType("nvarchar(130)");

                    b.HasKey("id");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("Hiring.Models.Education", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("educationalInstitute")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("employeeId");

                    b.ToTable("Educations", (string)null);
                });

            modelBuilder.Entity("Hiring.Models.Employee", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<int>("companyId")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("id");

                    b.HasIndex("companyId");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("Hiring.Models.Experience", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("companyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("employeeId");

                    b.ToTable("Experiences", (string)null);
                });

            modelBuilder.Entity("Hiring.Models.Recommendation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("recommendedEmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("recommenderEmployeeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("recommendedEmployeeId");

                    b.HasIndex("recommenderEmployeeId");

                    b.ToTable("Recommendations", (string)null);
                });

            modelBuilder.Entity("Hiring.Models.Skill", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<string>("skillName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex("employeeId");

                    b.ToTable("skills", (string)null);
                });

            modelBuilder.Entity("Hiring.Models.Education", b =>
                {
                    b.HasOne("Hiring.Models.Employee", "employee")
                        .WithMany("educations")
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("Hiring.Models.Employee", b =>
                {
                    b.HasOne("Hiring.Models.Company", "company")
                        .WithMany("compenyEmployees")
                        .HasForeignKey("companyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");
                });

            modelBuilder.Entity("Hiring.Models.Experience", b =>
                {
                    b.HasOne("Hiring.Models.Employee", "employee")
                        .WithMany("experiences")
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("Hiring.Models.Recommendation", b =>
                {
                    b.HasOne("Hiring.Models.Employee", "recommendedEmployee")
                        .WithMany("recommendationsReceived")
                        .HasForeignKey("recommendedEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hiring.Models.Employee", "recommenderEmployee")
                        .WithMany("recommendationsProvided")
                        .HasForeignKey("recommenderEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("recommendedEmployee");

                    b.Navigation("recommenderEmployee");
                });

            modelBuilder.Entity("Hiring.Models.Skill", b =>
                {
                    b.HasOne("Hiring.Models.Employee", "employee")
                        .WithMany("skills")
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("Hiring.Models.Company", b =>
                {
                    b.Navigation("compenyEmployees");
                });

            modelBuilder.Entity("Hiring.Models.Employee", b =>
                {
                    b.Navigation("educations");

                    b.Navigation("experiences");

                    b.Navigation("recommendationsProvided");

                    b.Navigation("recommendationsReceived");

                    b.Navigation("skills");
                });
#pragma warning restore 612, 618
        }
    }
}
